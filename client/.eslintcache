[{"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\index.js":"1","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\App.js":"2","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\pages\\SearchBooks.js":"3","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\pages\\SavedBooks.js":"4","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\components\\Navbar.js":"5","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\components\\LoginForm.js":"6","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\components\\SignupForm.js":"7","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\mutations.js":"8","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\queries.js":"9","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\auth.js":"10","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\localStorage.js":"11"},{"size":278,"mtime":1655840310815,"results":"12","hashOfConfig":"13"},{"size":1790,"mtime":1655840310810,"results":"14","hashOfConfig":"13"},{"size":5019,"mtime":1655840310818,"results":"15","hashOfConfig":"13"},{"size":2649,"mtime":1655840310817,"results":"16","hashOfConfig":"13"},{"size":2601,"mtime":1655840310813,"results":"17","hashOfConfig":"13"},{"size":2894,"mtime":1655840310811,"results":"18","hashOfConfig":"13"},{"size":3756,"mtime":1655840310814,"results":"19","hashOfConfig":"13"},{"size":1119,"mtime":1655840310820,"results":"20","hashOfConfig":"13"},{"size":269,"mtime":1655840310821,"results":"21","hashOfConfig":"13"},{"size":1283,"mtime":1655840310819,"results":"22","hashOfConfig":"13"},{"size":823,"mtime":1655840310820,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tmg6e5",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\index.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\App.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\pages\\SearchBooks.js",["48","49"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await saveBook({\r\n        variables: { bookData: { ...bookToSave } },\r\n      });\r\n      console.log(savedBookIds);\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedId) => savedId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some((savedId) => savedId === book.bookId)\r\n                        ? 'Book Already Saved!'\r\n                        : 'Save This Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\pages\\SavedBooks.js",["50","51"],"import React from 'react';\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { QUERY_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(QUERY_ME);\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n  const userData = data?.me || {};\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await removeBook({\r\n        variables: { bookId },\r\n      });\r\n\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing {userData.username}'s books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks?.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? 'book' : 'books'\r\n              }:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks?.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\components\\Navbar.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\mutations.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\queries.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\auth.js",[],"C:\\Users\\sbrun\\code\\fullstack-online\\01-Class-Content\\21-MERN\\02-Challenge\\Main\\client\\src\\utils\\localStorage.js",[],{"ruleId":"52","severity":1,"message":"53","line":27,"column":22,"nodeType":"54","messageId":"55","endLine":27,"endColumn":27},{"ruleId":"52","severity":1,"message":"56","line":82,"column":15,"nodeType":"54","messageId":"55","endLine":82,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":19,"column":24,"nodeType":"54","messageId":"55","endLine":19,"endColumn":29},{"ruleId":"52","severity":1,"message":"56","line":33,"column":15,"nodeType":"54","messageId":"55","endLine":33,"endColumn":19},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used."]